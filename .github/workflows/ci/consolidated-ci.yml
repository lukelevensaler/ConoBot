name: Consolidated CI/CD Pipeline
'on':
  push:
    branches:
    - main
    - develop
    - release/*
    paths:
    - '**/*.py'
    - pyproject.toml
    - requirements*.txt
    - .github/workflows/**
  pull_request:
    branches:
    - main
    - develop
    paths:
    - '**/*.py'
    - pyproject.toml
    - requirements*.txt
  workflow_dispatch:
    inputs:
      test_suite:
        description: Test suite to run
        required: true
        default: all
        type: choice
        options:
        - all
        - core
        - integration
        - slow
        - transformers
env:
  PYTHON_VERSION: '3.9'
  UV_CACHE_DIR: /tmp/.uv-cache
concurrency:
  group: ${{ github.workflow }}-${{ github.head_ref || github.run_id }}
  cancel-in-progress: true
jobs:
  quality-checks:
    name: Code Quality & Linting
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo '$HOME/.cargo/bin'
        >> $GITHUB_PATH
    - name: Create virtual environment
      run: uv venv
    - name: Install dependencies
      run: uv pip install -e . && uv pip install ruff black mypy
    - name: Run ruff linting
      run: ruff check .
    - name: Run black formatting check
      run: black --check .
    - name: Run type checking
      run: mypy --ignore-missing-imports .
  security-checks:
    name: Security Scanning
    runs-on: ubuntu-latest
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Run Trivy vulnerability scanner
      uses: aquasecurity/trivy-action@master
      with:
        scan-type: fs
        scan-ref: .
        format: sarif
        output: trivy-results.sarif
    - name: Upload Trivy scan results
      uses: github/codeql-action/upload-sarif@v2
      with:
        sarif_file: trivy-results.sarif
  core_tests:
    name: 'Test: core-tests'
    runs-on: ${{ matrix.os }}
    needs:
    - quality-checks
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite
      == 'core' || github.event.inputs.test_suite == '' }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        python-version:
        - '3.9'
    timeout-minutes: 30
    env:
      OMP_NUM_THREADS: '1'
      TRANSFORMERS_IS_CI: 'true'
      PYTEST_TIMEOUT: '120'
      RUN_PIPELINE_TESTS: 'false'
      PYTHONUNBUFFERED: '1'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt')
          }}
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo '$HOME/.cargo/bin'
        >> $GITHUB_PATH
    - name: Create virtual environment
      run: uv venv
    - name: Install dependencies
      run: uv pip install -e . && uv pip install pytest pytest-xdist
    - name: Show installed packages
      run: uv pip list
    - name: Create test results directory
      run: mkdir -p test-results
    - name: Run core-tests
      run: python -m pytest --maxfail=5 --tb=short --strict-markers --disable-warnings
        --color=yes -n 4 --junitxml=test-results/junit.xml -m 'not slow and not integration'
        tests/
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-core-tests-${{ matrix.os }}-${{ matrix.python-version }}
        path: test-results/
  integration_tests:
    name: 'Test: integration-tests'
    runs-on: ${{ matrix.os }}
    needs:
    - quality-checks
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite
      == 'integration' || github.event.inputs.test_suite == '' }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        python-version:
        - '3.9'
    timeout-minutes: 60
    env:
      OMP_NUM_THREADS: '1'
      TRANSFORMERS_IS_CI: 'true'
      PYTEST_TIMEOUT: '120'
      RUN_PIPELINE_TESTS: 'true'
      PYTHONUNBUFFERED: '1'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt')
          }}
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo '$HOME/.cargo/bin'
        >> $GITHUB_PATH
    - name: Create virtual environment
      run: uv venv
    - name: Install dependencies
      run: uv pip install -e . && uv pip install pytest pytest-xdist
    - name: Show installed packages
      run: uv pip list
    - name: Create test results directory
      run: mkdir -p test-results
    - name: Run integration-tests
      run: python -m pytest --maxfail=5 --tb=short --strict-markers --disable-warnings
        --color=yes -n 2 --junitxml=test-results/junit.xml -m 'integration' tests/
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-integration-tests-${{ matrix.os }}-${{ matrix.python-version
          }}
        path: test-results/
  slow_tests:
    name: 'Test: slow-tests'
    runs-on: ${{ matrix.os }}
    needs:
    - quality-checks
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite
      == 'slow' || github.event.inputs.test_suite == '' }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        python-version:
        - '3.9'
    timeout-minutes: 90
    env:
      OMP_NUM_THREADS: '1'
      TRANSFORMERS_IS_CI: 'true'
      PYTEST_TIMEOUT: '120'
      RUN_PIPELINE_TESTS: 'false'
      PYTHONUNBUFFERED: '1'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt')
          }}
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo '$HOME/.cargo/bin'
        >> $GITHUB_PATH
    - name: Create virtual environment
      run: uv venv
    - name: Install dependencies
      run: uv pip install -e . && uv pip install pytest pytest-xdist
    - name: Show installed packages
      run: uv pip list
    - name: Create test results directory
      run: mkdir -p test-results
    - name: Run slow-tests
      run: python -m pytest --maxfail=5 --tb=short --strict-markers --disable-warnings
        --color=yes -n 1 --junitxml=test-results/junit.xml -m 'slow' tests/
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-slow-tests-${{ matrix.os }}-${{ matrix.python-version }}
        path: test-results/
  transformers_tests:
    name: 'Test: transformers-tests'
    runs-on: ${{ matrix.os }}
    needs:
    - quality-checks
    if: ${{ github.event.inputs.test_suite == 'all' || github.event.inputs.test_suite
      == 'transformers' || github.event.inputs.test_suite == '' }}
    strategy:
      fail-fast: false
      matrix:
        os:
        - ubuntu-latest
        python-version:
        - '3.9'
    timeout-minutes: 45
    env:
      OMP_NUM_THREADS: '1'
      TRANSFORMERS_IS_CI: 'true'
      PYTEST_TIMEOUT: '120'
      RUN_PIPELINE_TESTS: 'false'
      PYTHONUNBUFFERED: '1'
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v4
      with:
        python-version: ${{ matrix.python-version }}
    - name: Cache UV dependencies
      uses: actions/cache@v3
      with:
        path: ${{ env.UV_CACHE_DIR }}
        key: ${{ runner.os }}-uv-${{ hashFiles('**/pyproject.toml', '**/requirements*.txt')
          }}
    - name: Install UV
      run: curl -LsSf https://astral.sh/uv/install.sh | sh && echo '$HOME/.cargo/bin'
        >> $GITHUB_PATH
    - name: Create virtual environment
      run: uv venv
    - name: Install dependencies
      run: uv pip install -e . && uv pip install torch torchvision transformers &&
        uv pip install pytest pytest-xdist pytest-timeout
    - name: Show installed packages
      run: uv pip list
    - name: Create test results directory
      run: mkdir -p test-results
    - name: Run transformers-tests
      run: python -m pytest --maxfail=5 --tb=short --strict-markers --disable-warnings
        --color=yes -n 2 --junitxml=test-results/junit.xml -m 'transformers' tests/
    - name: Upload test results
      uses: actions/upload-artifact@v3
      if: always()
      with:
        name: test-results-transformers-tests-${{ matrix.os }}-${{ matrix.python-version
          }}
        path: test-results/
  coverage:
    name: Code Coverage
    runs-on: ubuntu-latest
    needs:
    - core_tests
    - integration_tests
    - slow_tests
    - transformers_tests
    if: always()
    steps:
    - name: Checkout code
      uses: actions/checkout@v4
    - name: Set up Python
      uses: actions/setup-python@v4
      with:
        python-version: ${{ env.PYTHON_VERSION }}
    - name: Install dependencies
      run: curl -LsSf https://astral.sh/uv/install.sh | sh && export PATH='$HOME/.cargo/bin:$PATH'
        && uv pip install coverage pytest-cov
    - name: Run coverage
      run: python -m pytest --cov=. --cov-report=xml tests/
    - name: Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage.xml
